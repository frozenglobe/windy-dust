#!/bin/bash

# This script generates images at specified wavelengths using mcfost. Feed wavelengths as arguments.
# The script checks for the existence of data_th and the dust properties file. 
# If a density fits file is found, it uses that; otw generates according to parameter file.

# --- cd to correct directory. first argument reserved for pwd ---
# if [ -f "pipeline" ]; then
#     echo "Running from pipeline directory."
#     cd $1
# else
#     echo "No pipeline file found. Exiting."
#     exit 1
# fi

# --- check for data_th directory and dust properties file ---
if [ ! -d "data_th" ]; then
    echo "data_th directory not found. Exiting."
    exit 1
elif [ ! -f "_dust_prop_th.tmp" ]; then
    echo "Dust properties file not found. Exiting."
    exit 1
else
    echo "data_th directory and dust properties file exist."
fi

# --- obtain parameter file ---
para_path=$(find . -maxdepth 1 -type f -name "*.para")

# --- obtain wavelengths from arguments ---
wavelengths=( "$@" )
echo "${wavelengths[@]}"

# --- checks for existence of density fits file ---
fits_count=$(ls -1 settled_density.fits | wc -l)

# --- checks for existence of image directories ---
check_existence() {
    if [ -d "data_$1" ]; then
        return 0
    else
        return 1
    fi
}

# --- main block ---
if [ $fits_count -eq 0 ]; then
    echo "No density fits file found. Proceeding with mcfost..."
    for arg in "${wavelengths[@]}"; do

        if check_existence $arg; then echo "data_$arg already exists. Skipping."; continue; fi

        echo "Generating $arg um..."
        # mcfost $para_path -img $arg &
        # (mcfost $para_path -img $arg; echo "Done")
        sleep 2
        echo "Done"
    done
    wait
    echo "All jobs completed."
else
    fits_path=$(find . -maxdepth 1 -type f -name "settled_density.fits")
    echo "Density fits file found. Proceeding with mcfost..."

    for arg in "${wavelengths[@]}"; do

        if check_existence $arg; then echo "data_$arg already exists. Skipping."; continue; fi
        echo "Generating $arg um..."
        echo "$arg"
        mcfost $para_path -df $fits_path -img $arg &
        process_id=$!
        echo "PID: $process_id"
        sleep 2
        echo "Exit status: $?"

    done
    wait
    echo "All jobs completed."
fi

exit 0