#!/bin/bash

eval "$(conda shell.bash hook)"
conda activate pyspedas

# suppose the same parameter file is used for all runs, i.e. the parameter
# that is being changed is not in the parameter file (e.g. sigma_dot, a_stl)
# so only _run_param.txt needs to be changed

# defaults
smlr=(2e-12) # surface mass loss rate at 10 au in g/cm2/s
pwr=(-1.5) # power law index
gs=(5e-5) # global minimum stalling grain size in cm
incl=(NaN) # inclination in radians

Help()
{
    echo "Usage: $0 -s <smlr1,smlr2,...> -p <pwr1,pwr2,...> -g <gs1,gs2,...> -i <incl1,incl2,...>"
    echo "  -s <smlr>   Comma-separated list of surface mass loss rates (in g/cm2/s) at 10 au"
    echo "  -p <pwr>    Comma-separated list of power law indices"
    echo "  -g <gs>     Comma-separated list of global minimum stalling grain sizes (in cm)"
    echo "  -i <incl>   Comma-separated list of inclinations (in radians)"
    echo "Example: $0 -s 2e-12,2e-11 -p -1.5,-1.0 -g 5e-5 -i NaN"
    exit 0
}

while getopts ":hs:p:g:i:" option; do
    case $option in 
        h) 
            Help
            exit;;
        s) # SMLR at 10 au in g/cm2/s
            IFS=','
            smlr=($OPTARG);;

        p) # SMLR power law index
            IFS=','
            pwr=($OPTARG);;

        g) # global minimum stalling grain size in cm
            IFS=','
            gs=($OPTARG);;

        i) # inclination in radians
            IFS=','
            incl=($OPTARG);;

        \?)
            echo "Error: Invalid option"
            exit;;
    esac
done




# calculate grain size resolution and update parameter file
python /data/jhyl3/windy-dust/mcfost_files/gs_resolution.py
rm old_para.bak # remove clutter

# preemptively generate PSFs

# j tracks whether psf generation has started
j=0
if [ ! -d "psf_fits" ]; then
    j=1
    python /data/jhyl3/windy-dust/mcfost_files/psf_pregen.py &
    psf_process_id=$!
    echo "PSF PID: $psf_process_id"
else
    echo "psf_fits directory already exists. Skipping PSF generation."
fi

# initialise counter: finds how many param_* directories already exist
i=$(find . -maxdepth 1 -type d -name "param_*" | wc -l)
((i++))
k=$i # counter for image_gen later

echo "Run, SMLR, PLI, a_stl, incl" > param_space.csv

for smlr_arg in "${smlr[@]}"; do
    for pwr_arg in "${pwr[@]}"; do
        for gs_arg in "${gs[@]}"; do
            for incl_arg in "${incl[@]}"; do
                echo "$i, $smlr_arg, $pwr_arg, $gs_arg, $incl_arg" >> param_space.csv
                mkdir "param_$i" && cd "param_$i"
                cp ../ref4.1.para ./
                bash ../../sed_gen ${smlr_arg} 10 ${pwr_arg} ${gs_arg} ${incl_arg} &
                cd ..
                ((i++))
                sleep 2
            done
        done
    done
done

if [ $j -eq 1 ]; then
    echo "Waiting for PSF generation to complete..."
    wait $psf_process_id
    echo "PSF generation completed."
fi

wait
echo "All data_th jobs complete."


for ((n=$k;n<$i;n++)); do
    cd "param_$n"
    bash ../../image_gen 0.8 2.0 4.4 7.7 12.8 21.0 && python ../../dark_lane.py ../psf_fits &
    cd ../
    sleep 2
done

wait

rm -r ./param_*/data_disk_original ./param_*/settled_density.fits # clean up